# -*- coding: utf-8 -*-
"""D_ComputeAreaFrame.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L95gfuV-Yswu2nJhpfWDAB1reVaeIRKa
"""

import numpy as np
import matplotlib.pyplot as plt
from glob import glob
import skimage, cv2
import pandas as pd

Dbase = "/content/drive/MyDrive/Pesquisa/Projetos/ovos/images/"

def AreaThreshold(img, area = 20):
    nlabels,labels,stats,centroid = cv2.connectedComponentsWithStats(np.uint8(img), 4, cv2.CV_32S)

    output = np.copy(img)

    for i in range(output.shape[0]):
        for j in range(output.shape[1]):
            if stats[labels[i][j], cv2.CC_STAT_AREA] < area:
                output[i][j] = 0

    return output

def circularMask(img):
  imgout = np.copy(img)
  shape = imgout.shape
  mask_img = np.zeros(shape, dtype=np.uint8)

  height_c = int(shape[0]/2)
  width_c = int(shape[1]/2)

  radius_c = width_c - 10
  center = (height_c, width_c)
  rr, cc = skimage.draw.disk(center, radius_c, shape=shape)
  mask_img[rr, cc] = 1

  cv2.bitwise_and(src1 = imgout, src2 = imgout, dst = mask_img, mask = mask_img)
  return mask_img


def computeArea(img):
  ini = 16
  end = 24
  n_plot = 0
  to_subplot = (end - ini)

  img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

  imgG = img[:,:,1]

  # CLAHE operation on the Green channel of image
  clahe = cv2.createCLAHE(clipLimit=4, tileGridSize=(8,8))
  clahe_img = clahe.apply(imgG)

  # apply morphology
  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7,7))
  morph = cv2.morphologyEx(clahe_img, cv2.MORPH_DILATE, kernel)

  # divide gray by morphology image
  division = cv2.divide(clahe_img, morph, scale=255)

  # threshold
  thresh = cv2.threshold(division, 0, 255, cv2.THRESH_OTSU)[1]

  # invert
  thresh = 255 - thresh

  # area based thresholding/cleaning
  thresh = AreaThreshold(thresh)

  # applying Circular Mask
  thresh = circularMask(thresh)

  # counting the number of pixels
  nwhite = np.sum(thresh == 255)
  nblack = np.sum(thresh == 0)

  return nwhite



